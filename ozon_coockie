async def set_cookies(browser):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∫—É–∫—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞."""
    await browser.get("https://ozon.kz")  # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∞–π—Ç, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫—É–∫—É
    await browser.add_cookie({
        "name": "adult_user_birthdate",
        "value": "1990-01-01",
        "domain": ".ozon.kz",
        "path": "/",
    })
    print("‚úÖ –ö—É–∫–∞ adult_user_birthdate=1990-01-01 –¥–æ–±–∞–≤–ª–µ–Ω–∞")




import json
import asyncio
from selenium_driverless import webdriver
from selenium_driverless.types.options import Options
from selenium_driverless.types.by import By
import time

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
PRODUCTS_FILE = "ozon_new/all_first_products.txt"
OUTPUT_FILE = "ozon_new/product_details.json"
DATA_FOLDER = "ozon_new/results"

# –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
BATCH_SIZE = 1000

async def wait_for_element(browser, selector, timeout=10):
    """–ñ–¥—ë—Ç –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ."""
    for _ in range(timeout):
        try:
            element = await browser.find_element(By.CSS_SELECTOR, selector)
            if element:
                return element
        except Exception:
            await asyncio.sleep(1)  # –ñ–¥—ë–º 1 —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
    return None

async def set_cookies(browser):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∫—É–∫—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞."""
    await browser.get("https://ozon.kz")  # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∞–π—Ç, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫—É–∫—É
    await browser.add_cookie({
        "name": "adult_user_birthdate",
        "value": "1990-01-01",
        "domain": ".ozon.kz",
        "path": "/",
    })
    print("‚úÖ –ö—É–∫–∞ adult_user_birthdate=1990-01-01 –¥–æ–±–∞–≤–ª–µ–Ω–∞")

async def fetch_api_data(browser, product_link, is_first=False):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç API-—Å—Å—ã–ª–∫—É –∏ –ø–æ–ª—É—á–∞–µ—Ç JSON-–æ—Ç–≤–µ—Ç."""
    api_url = f"https://ozon.kz/api/entrypoint-api.bx/page/json/v2?url=%2Fproduct%2F{product_link}%2F%3F_bctx%3DCAQQg5-IAQ%26at%3DjYtZOWQQKt9OqDA8iArM0MEtxWgxkwU4GQ5JyurGzAjD%26avtc%3D1%26avte%3D4%26avts%3D1738923569%26hs%3D1%26layout_container%3DpdpPage2column%26layout_page_index%3D2%26sh%3DQ0t7iKmkwg%26start_page_id%3D6da69ecc551321c18a299ed66c6f7088"

    print(f"üîç –û—Ç–∫—Ä—ã–≤–∞—é API: {api_url}")
    await browser.get(api_url)

    if is_first:
        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Å—ã–ª–∫–∏...")
        time.sleep(10)

    await wait_for_element(browser, "body")

    try:
        response_text = await browser.execute_script("return document.body.innerText;")
        data = json.loads(response_text)

        widget_key = next((key for key in data.get("widgetStates", {}) if key.startswith("webCurrentSeller")), None)
        if widget_key:
            return data["widgetStates"][widget_key]

    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ API {api_url}: {e}")

    return None

async def save_batch(results, batch_number):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –±–∞—Ç—á –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª."""
    output_path = f"{DATA_FOLDER}/product_details_batch_{batch_number}.json"
    with open(output_path, "w", encoding="utf-8") as f:
        json.dump(results, f, indent=4, ensure_ascii=False)
    print(f"‚úÖ –ë–∞—Ç—á {batch_number} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {output_path}")
    

async def main():
    with open(PRODUCTS_FILE, "r", encoding="utf-8") as f:
        product_links = [line.strip().split("/")[-1] for line in f if line.strip()]

    options = Options()
    options.headless = False

    browser = await webdriver.Chrome(options=options).start_session()
    await set_cookies(browser)

    results = {}
    batch_number = 1
    items_processed = 0

    for i, product_link in enumerate(product_links):
        data = await fetch_api_data(browser, product_link, is_first=(i == 0))
        if data:
            results[product_link] = data
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –¥–ª—è {product_link}")
        else:
            print(f"‚ö† –î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã –¥–ª—è {product_link}")

        items_processed += 1
        if items_processed % BATCH_SIZE == 0:
            await save_batch(results, batch_number)
            results = {}  # –û—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–∞—Ç—á–∞
            batch_number += 1

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–∞—Ç—á, –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø–æ–ª–Ω—ã–π
    if results:
        await save_batch(results, batch_number)

    print(f"‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞—Ç—á–∞—Ö.")

    await browser.quit()

# –ó–∞–ø—É—Å–∫
asyncio.run(main())
